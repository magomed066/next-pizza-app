generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_URL")
   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id Int @id @default(autoincrement())

  fullName String
  email String @unique
  password String

  role UserRole @default(USER)

  provider String?
  providerId String?

  orders Order[]
  cart Cart?

  verificationCode VerificationCode?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())

  name String
  imageUrl String

  // This relation between product and category one to many (Category has many products)
  category Category @relation(fields: [categoryId], references: [id])
  // This fiels is for the db, so that it could know what category it relates to
  categoryId Int

  // Product can have many ingredients (many to many)
  ingredient Ingredient[]

  // Product can have many variations
  items ProductItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Product variation
model ProductItem {
  id Int @id @default(autoincrement())

  price Int
  size Int?
  pizzaType Int?

  // This relation between productVariation and product one to many (Product has many variations)
  product Product @relation(fields: [productId], references: [id])
  // This fiels is for the db, so that it could know what product it relates to
  productId Int

  cartItems CartItem[]
}

model Category {
  id Int @id @default(autoincrement())

  name String @unique
  
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id Int @id @default(autoincrement())

  name String
  price Int

  imageUrl String

  products Product[]
  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Cart

model Cart {
  id Int @id @default(autoincrement())

  // User can have only one cart (one to one) (and it is optional so thet we could create a cart for non authorized user)
  user User? @relation(fields: [userId], references: [id])
  // This fiels is for the db, so that it could know what user it relates to
  userId Int? @unique

  // For non authorized users
  token String

  totalAmount Int @default(0)

  items CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  productItem ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int

  cart Cart @relation(fields: [cartId], references: [id])
  cartId Int
 
  quantity Int

  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  user User @relation(fields: [userId], references: [id])
  userId Int @unique

  token String

  totalAmount Int

  status OrderStatus @default(PENDING)

  paymentId String?

  items Json

  fullName String
  email String
  phone String
  address String
  comment String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id Int @id @default(autoincrement())

  user  User @relation(fields: [userId], references: [id])
  userId Int  @unique

  code String

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}
